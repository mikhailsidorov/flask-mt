version: '3'
services:
  
  app:
    container_name: "app"
    restart: always
    build: ./app/
    ports:
      - "4444:4444"
    expose:
      - "8000"
    links:
      - postgres:postgres
      - redis:redis
      - elasticsearch:elasticsearch
      - smtp:smtp
    env_file: 
      - .env
    environment:
      - DATABASE_URL=postgresql+psycopg2://${DB_USER}:${DB_PASS}@${DB_SERVICE}:5432/${DB_NAME}
    volumes:
      - ./app:/data/app
    working_dir: /data/app
    command: ["sh", "./wait-for-postgres.sh", "postgres", "gunicorn", "microblog:app", "-w", "1", "-b", ":8000"]
    depends_on:
      - app-migration
      - app-translation
      - postgres
      - rq-worker
      - elasticsearch
      - redis
    
  app-migration:
    container_name: "app-migration"
    restart: on-failure
    build: ./app/
    links:
      - postgres:postgres
    env_file: 
      - .env
    environment:
      - DATABASE_URL=postgresql+psycopg2://${DB_USER}:${DB_PASS}@${DB_SERVICE}:5432/${DB_NAME}
      - FLASK_DEBUG=0
    volumes:
      - ./app:/data/app
    working_dir: /data/app
    command: flask db upgrade
    depends_on:
      - postgres

  app-translation:
    container_name: "app-translation"
    restart: on-failure
    build: ./app/
    env_file:
      - .env
    environment:
      - FLASK_DEBUG=0
    volumes:
      - ./app:/data/app
    working_dir: /data/app
    command: flask translate compile

  rq-worker:
    container_name: "rq-worker"
    restart: always
    build: ./app/
    ports:
      - "4445:4445"
    links:
      - redis:redis
      - postgres:postgres
      - elasticsearch:elasticsearch
      - smtp:smtp
    env_file: 
      - .env
    environment:
      - DATABASE_URL=postgresql+psycopg2://${DB_USER}:${DB_PASS}@${DB_SERVICE}:5432/${DB_NAME}
      - FLASK_DEBUG=0
    volumes:
      - ./app:/data/app
    command: rq worker microblog-tasks -u ${REDIS_URL}
    depends_on:
      - redis
      - elasticsearch
      - postgres

  nginx:
    container_name: "nginx"
    restart: always
    build: ./nginx/
    ports:
      - "80:80"
    volumes:
      - ./app:/data/app
    links:
      - app:app
    depends_on:
      - app
      - postgres
      - app-migration

  postgres:
    container_name: "postgres"
    restart: always
    image: postgres:latest
    volumes:
      - ./postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - db:/var/lib/postgresql
    env_file:
      - .env

  elasticsearch:
    container_name: "elasticsearch"
    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.1
    container_name: elasticsearch
    environment:
      - cluster.name=flask-mt
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    ports:
      - 9200:9200

  redis:
    container_name: "redis"
    restart: always
    image: redis:latest
    ports:
      - 6379:6379

  smtp:
    container_name: "smtp"
    image: python:3.6
    expose:
      - "25"
    command: python -m smtpd -n -c DebuggingServer 0.0.0.0:25

volumes:
  elasticsearch:
  db:
